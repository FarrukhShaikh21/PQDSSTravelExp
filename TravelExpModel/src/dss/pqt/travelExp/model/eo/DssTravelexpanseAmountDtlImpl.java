package dss.pqt.travelExp.model.eo;

import java.math.BigDecimal;

import java.sql.SQLException;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 21 13:03:52 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DssTravelexpanseAmountDtlImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ParticularIdPk,
        Particular,
        AmountDate,
        Amount,
        UserIdFk,
        EnterDate,
        LastUpdatedBy,
        LastUpdatedDate,
        VoucherIdFk,
        DssTravelExpanseReimbursement;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int PARTICULARIDPK = AttributesEnum.ParticularIdPk.index();
    public static final int PARTICULAR = AttributesEnum.Particular.index();
    public static final int AMOUNTDATE = AttributesEnum.AmountDate.index();
    public static final int AMOUNT = AttributesEnum.Amount.index();
    public static final int USERIDFK = AttributesEnum.UserIdFk.index();
    public static final int ENTERDATE = AttributesEnum.EnterDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int VOUCHERIDFK = AttributesEnum.VoucherIdFk.index();
    public static final int DSSTRAVELEXPANSEREIMBURSEMENT = AttributesEnum.DssTravelExpanseReimbursement.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DssTravelexpanseAmountDtlImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("dss.pqt.travelExp.model.eo.DssTravelexpanseAmountDtl");
    }


    /**
     * Gets the attribute value for ParticularIdPk, using the alias name ParticularIdPk.
     * @return the value of ParticularIdPk
     */
    public Number getParticularIdPk() {
        return (Number) getAttributeInternal(PARTICULARIDPK);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParticularIdPk.
     * @param value value to set the ParticularIdPk
     */
    public void setParticularIdPk(Number value) {
        setAttributeInternal(PARTICULARIDPK, value);
    }

    /**
     * Gets the attribute value for Particular, using the alias name Particular.
     * @return the value of Particular
     */
    public String getParticular() {
        return (String) getAttributeInternal(PARTICULAR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Particular.
     * @param value value to set the Particular
     */
    public void setParticular(String value) {
        setAttributeInternal(PARTICULAR, value);
    }

    /**
     * Gets the attribute value for AmountDate, using the alias name AmountDate.
     * @return the value of AmountDate
     */
    public Date getAmountDate() {
        return (Date) getAttributeInternal(AMOUNTDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AmountDate.
     * @param value value to set the AmountDate
     */
    public void setAmountDate(Date value) {
        setAttributeInternal(AMOUNTDATE, value);
    }

    /**
     * Gets the attribute value for Amount, using the alias name Amount.
     * @return the value of Amount
     */
    public Number getAmount() {
        return (Number) getAttributeInternal(AMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Amount.
     * @param value value to set the Amount
     */
    public void setAmount(Number value) {
        setAttributeInternal(AMOUNT, value);
    }

    /**
     * Gets the attribute value for UserIdFk, using the alias name UserIdFk.
     * @return the value of UserIdFk
     */
    public Number getUserIdFk() {
        return (Number) getAttributeInternal(USERIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserIdFk.
     * @param value value to set the UserIdFk
     */
    public void setUserIdFk(Number value) {
        setAttributeInternal(USERIDFK, value);
    }

    /**
     * Gets the attribute value for EnterDate, using the alias name EnterDate.
     * @return the value of EnterDate
     */
    public Date getEnterDate() {
        return (Date) getAttributeInternal(ENTERDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnterDate.
     * @param value value to set the EnterDate
     */
    public void setEnterDate(Date value) {
        setAttributeInternal(ENTERDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the value of LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date) getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for VoucherIdFk, using the alias name VoucherIdFk.
     * @return the value of VoucherIdFk
     */
    public Number getVoucherIdFk() {
        return (Number) getAttributeInternal(VOUCHERIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for VoucherIdFk.
     * @param value value to set the VoucherIdFk
     */
    public void setVoucherIdFk(Number value) {
        setAttributeInternal(VOUCHERIDFK, value);
    }


    /**
     * @return the associated entity DssTravelExpanseReimbursementImpl.
     */
    public DssTravelExpanseReimbursementImpl getDssTravelExpanseReimbursement() {
        return (DssTravelExpanseReimbursementImpl) getAttributeInternal(DSSTRAVELEXPANSEREIMBURSEMENT);
    }

    /**
     * Sets <code>value</code> as the associated entity DssTravelExpanseReimbursementImpl.
     */
    public void setDssTravelExpanseReimbursement(DssTravelExpanseReimbursementImpl value) {
        setAttributeInternal(DSSTRAVELEXPANSEREIMBURSEMENT, value);
    }

    /**
     * @param particularIdPk key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number particularIdPk) {
        return new Key(new Object[] { particularIdPk });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
     protected void create(AttributeList attributeList) {
         super.create(attributeList);
         Date currentDate = new Date();
         setEnterDate((Date) currentDate.getCurrentDate());
         setLastUpdatedDate((Date) currentDate.getCurrentDate());
         SequenceImpl seq = new SequenceImpl("DSS_TRAVELEXPANSE_AMNT_SEQ\n", getDBTransaction());
         setParticularIdPk(seq.getSequenceNumber());
         
//         setBranchStatus("INCOMPLETE");
//         setDssStatus("INCOMPLETE");
         
         FacesContext fctx = FacesContext.getCurrentInstance();
         ExternalContext ectx = fctx.getExternalContext();
         HttpSession userSession = (HttpSession) ectx.getSession(false);
         try {
             setUserIdFk(new Number(userSession.getAttribute("pUserId")));
             setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
         } catch (SQLException ex) {
             setUserIdFk(new Number(0));
             setLastUpdatedBy(new Number(0));
         }
     }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
            Date currentDate = new Date();
            if (operation == DML_UPDATE) {
                setLastUpdatedDate((Date) currentDate.getCurrentDate());
                FacesContext fctx = FacesContext.getCurrentInstance();
                ExternalContext ectx = fctx.getExternalContext();
                HttpSession userSession = (HttpSession) ectx.getSession(false);
                try {
                    setUserIdFk(new Number(userSession.getAttribute("pUserId")));
                    setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
                } catch (SQLException ex) {
                    setUserIdFk(new Number(0));
                    setLastUpdatedBy(new Number(0));
                }
            }
            super.doDML(operation, e);
        }
        }

